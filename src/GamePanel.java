import java.awt.Color;
import java.awt.GridLayout;
import javax.swing.JTextField;
import java.awt.event.*;
import javax.swing.JOptionPane;

public class GamePanel extends javax.swing.JPanel implements KeyListener {
   
    static int cells = 0;
    JTextField[][] jtf = new JTextField[9][9];
    int x, y;
    int r1[][] = 
      {{5, 3, 4, 6, 7, 8, 9, 1, 2},
       {6, 7, 2, 1, 9, 5, 3, 4, 8},
       {1, 9, 8, 3, 4, 2, 5, 6, 7},
       {8, 5, 9, 7, 6, 1, 4, 2, 3},
       {4, 2, 6, 8, 5, 3, 7, 9, 1},
       {7, 1, 3, 9, 2, 4, 8, 5, 6},
       {9, 6, 1, 5, 3, 7, 2, 8, 4},
       {2, 8, 7, 4, 1, 9, 6, 3, 5},
       {3, 4, 5, 2, 8, 6, 1, 7, 9}};
    
    
    
    
    
    
    
//    {{1, 2, 3, 4, 5, 6, 7, 8, 9},
//    {4, 5, 6, 7, 8, 9, 1, 2, 3},
//    {7, 8, 9, 1, 2, 3, 4, 5, 6},
//    {2, 3, 4, 5, 6, 7, 8, 9, 1},
//    {5, 6, 7, 8, 9, 1, 2, 3, 4},
//    {8, 9, 1, 2, 3, 4, 5, 6, 7},
//    {3, 4, 5, 6, 7, 8, 9, 1, 2},
//    {6, 7, 8, 9, 1, 2, 3, 4, 5},
//    {9, 1, 2, 3, 4, 5, 6, 7, 8}};
    boolean won = true;

    public GamePanel() {
        initComponents();
        jPanel3.setLayout(new GridLayout(9, 9,-6,-6));
        jLabel1.setHorizontalAlignment(JTextField.CENTER);
        jPanel1.setBackground(new Color(148,191,190));
        //if Easy button clicked
        if (cells == 35) {
            jLabel1.setText("Easy");
        }
                //if Intermediate button clicked
        else if (cells == 45) {
            jLabel1.setText("Intermediate");
        }
                //if Expert button clicked
        else {
            jLabel1.setText("Expert");
        }
        generateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        checkBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        newBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 151, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 307, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(251, 74, 73));
        jPanel1.setAlignmentY(0.0F);
        jPanel1.setLayout(new java.awt.GridLayout());

        checkBtn.setBackground(new java.awt.Color(147, 255, 107));
        checkBtn.setFont(new java.awt.Font("Shree Devanagari 714", 1, 18)); // NOI18N
        checkBtn.setText("Check");
        checkBtn.setMargin(new java.awt.Insets(6, 2, 2, 2));
        checkBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBtnMouseClicked(evt);
            }
        });
        checkBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBtnActionPerformed(evt);
            }
        });
        jPanel1.add(checkBtn);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Shree Devanagari 714", 1, 20)); // NOI18N
        jLabel1.setText("Easy");
        jPanel1.add(jLabel1);

        newBtn.setFont(new java.awt.Font("Shree Devanagari 714", 1, 18)); // NOI18N
        newBtn.setText("New");
        newBtn.setMargin(new java.awt.Insets(6, 2, 2, 2));
        newBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newBtnMouseClicked(evt);
            }
        });
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });
        jPanel1.add(newBtn);

        jPanel3.setBackground(new java.awt.Color(175, 157, 167));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 282, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newBtnActionPerformed

    private void newBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newBtnMouseClicked
        // TODO add your handling code here:
        Sudoku.playPanel();
    }//GEN-LAST:event_newBtnMouseClicked

    private void checkBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBtnMouseClicked
        // TODO add your handling code here:
        boolean win = true; // win is false if the answer is false or there is an empty jtextfield
        for (x = 0; x < 9; x++) {
            for (y = 0; y < 9; y++) {
                if (jtf[x][y].isEditable() == true) {
                    if (jtf[x][y].getText().equals("") == false) { // To check if the jtextfield is empty or not
                        if (Integer.parseInt(jtf[x][y].getText()) != r1[x][y]) { // mean the answer is wrong
                            jtf[x][y].setBackground(new Color(207,77,81));
                            win = false;
                        } else if (Integer.parseInt(jtf[x][y].getText()) == r1[x][y]) {// mean the answer is right
                            jtf[x][y].setBackground(new Color(122, 222, 156));
                            jtf[x][y].setEditable(false);
                        }

                    }
                    if (jtf[x][y].getText().equals("") == true) {
                        win = false;
                    }
                }
            }
        }

        if (win == true && won == true) {
            won = false; // if the user pressed check button more than once the message will apear only in the first time
            JOptionPane.showMessageDialog(this, "YOU WON!");

        }


    }//GEN-LAST:event_checkBtnMouseClicked

    private void checkBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkBtnActionPerformed
    public void generateTable() {

        int temp[];
        int temp2;
        int sr1 = (int) (Math.random() * 3);
        int sr2 = (int) (Math.random() * 3);
        // shuffling rows
        int r2[] = r1[sr1];
        r1[sr1] = r1[sr2];
        r1[sr2] = r2;

        sr1 += 3;
        sr2 += 3;
        int r3[] = r1[sr1];
        r1[sr1] = r1[sr2];
        r1[sr2] = r3;

        sr1 += 3;
        sr2 += 3;
        int r4[] = r1[sr1];
        r1[sr1] = r1[sr2];
        r1[sr2] = r4;
        
        //mirror the matrix vertically
        for (int j = 0; j < r1.length; ++j) {
            int[] row = r1[j];
            for (int i = 0; i < (r1.length / 2); i++) {
                int tempp = row[i];
                row[i] = r1[j][row.length - i - 1];
                row[row.length - i - 1] = tempp;
            }
            r1[j]=row;
        }
        // mirror the matrix horizontally
            
             for (x = 0; x < r1.length/2; x++) {
                int tempp [];
                tempp= r1[x];
                r1[x] = r1[r1.length - x - 1];
                r1[r1.length - x - 1] = tempp;
            
        }
        
        //shuffling columns
        sr1 = (int) (Math.random() * 3);
        sr2 = (int) (Math.random() * 3);
        int c2[] = r1[sr1];
        r1[sr1] = r1[sr2];
        r1[sr2] = c2;

        sr1 += 3;
        sr2 += 3;
        int c3[] = r1[sr1];
        r1[sr1] = r1[sr2];
        r1[sr2] = c3;

        sr1 += 3;
        sr2 += 3;
        int c4[] = r1[sr1];
        r1[sr1] = r1[sr2];
        r1[sr2] = c4;

        //swapping two groups of rows
        sr1 = (int) (Math.random() * 3);
        sr2 = (int) (Math.random() * 3);
        //group 1 & 2
        if ((sr1 == 0 && sr2 == 1) || (sr2 == 0 && sr1 == 1)) {
            temp = r1[0];
            r1[0] = r1[3];
            r1[3] = temp;
            temp = r1[1];
            r1[1] = r1[4];
            r1[4] = temp;
            temp = r1[2];
            r1[2] = r1[5];
            r1[5] = temp;

        } //group 1 & 3
        else if ((sr1 == 0 && sr2 == 2) || (sr2 == 0 && sr1 == 2)) {
            temp = r1[0];
            r1[0] = r1[6];
            r1[6] = temp;
            temp = r1[1];
            r1[1] = r1[7];
            r1[7] = temp;
            temp = r1[2];
            r1[2] = r1[8];
            r1[8] = temp;
        } //group 2 & 3
        else if ((sr1 == 1 && sr2 == 2) || (sr2 == 1 && sr1 == 2)) {
            temp = r1[3];
            r1[3] = r1[6];
            r1[6] = temp;
            temp = r1[4];
            r1[4] = r1[7];
            r1[7] = temp;
            temp = r1[5];
            r1[5] = r1[8];
            r1[8] = temp;
        }
        //printing the numbers 
        for (x = 0; x < 9; x++) {
            for (y = 0; y < 9; y++) {
                jtf[x][y] = new JTextField(r1[x][y] + "");
                jtf[x][y].addKeyListener(this);
                jtf[x][y].setEditable(false);
                if ((y==3 || y==4 ||y==5)&&(x==0 || x==1 || x==2 || x==6 || x==7 || x==8) ||
                        (x==3 || x==4 ||x==5)&&(y==0 || y==1 || y==2 || y==6 || y==7 || y==8)){
                jtf[x][y].setBackground(new Color(217,234,207));
                }
                else {
                    jtf[x][y].setBackground(new Color(122,157,156));
                }
                jtf[x][y].setForeground(new Color(15,50,12));
                jtf[x][y].setFont(new java.awt.Font("Shree Devanagari 714", 1, 18));
                jtf[x][y].setHorizontalAlignment(JTextField.CENTER);
                jPanel3.add(jtf[x][y]);

            }

        }
        generateGame();
    }

    public void generateGame() {
        int a;
        int b;
        for (x = 0; x < cells; x++) {
            // delete the text of some cells randomly  
            a = (int) (Math.random() * 9);
            b = (int) (Math.random() * 9);
            if (jtf[a][b].getText().equals("") == false) { //to make sure not to delete the same cell more than once
                jtf[a][b].setText("");
                jtf[a][b].setForeground(Color.white);
                jtf[a][b].setEditable(true);
             
            } else {
                x--;
            }

        }
    }

    public void keyReleased(KeyEvent e) {
        for (x = 0; x < 9; x++) {
            for (y = 0; y < 9; y++) {
                // to make the textfileds accept only numbers 
                if (e.getSource() == jtf[x][y]) {
                    try {

                        Integer.parseInt(jtf[x][y].getText());

                    } catch (Exception ex) {

                        jtf[x][y].setText("");
                    }
                }
            }
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton newBtn;
    // End of variables declaration//GEN-END:variables

    @Override
    public void keyTyped(KeyEvent e) {

    }

    @Override
    public void keyPressed(KeyEvent e) {

    }

}
